syntax = "proto3";
package dkv.serverpb;
option go_package = "serverpb";

service DKV {
  // Put puts the given key into the key value store
  rpc Put (PutRequest) returns (PutResponse);

  // Get gets the value associated with the given key from the key value store
  rpc Get (GetRequest) returns (GetResponse);

  // MultiGet gets all the values associated with the given keys from the key value store
  rpc MultiGet (MultiGetRequest) returns (MultiGetResponse);
}

message Status {
  // Code captures the error code of the underlying operation.
  // A non zero error code is considered to be a failure.
  int32 code = 1;
  // Message captures if any the error message of the failed operation.
  string message = 2;
}

message PutRequest {
  // Key is the key, in bytes, to put into the key value store.
  bytes key = 1;
  // Value is the value, in bytes, to associate with the key in the key value store.
  bytes value = 2;
}

message PutResponse {
  // Status indicates the result of the Put operation
  Status status = 1;
}

message GetRequest {
  // Key is the key, in bytes, whose associated value is loaded from the key value store.
  bytes key = 1;
}

message GetResponse {
  // Status indicates the result of the Get operation
  Status status = 1;
  // Value is the value, in bytes, that is associated with the given key in the key value store.
  bytes value = 2;
}

message MultiGetRequest {
  // GetRequests are the individual Get requests comprising bulk Get operation.
  repeated GetRequest getRequests = 1;
}

message MultiGetResponse {
  // GetResponses are the individual responses of bulk Get operation.
  repeated GetResponse getResponses = 1;
}

service DKVReplication {
  // GetChanges retrieves all changes from a given change number
  rpc GetChanges (GetChangesRequest) returns (GetChangesResponse);
}

message GetChangesRequest {
  // FromChangeNumber is the starting change number from which to retrieve changes
  uint64 fromChangeNumber = 1;
  // MaxNumberOfChanges is the maximum number of changes to return from this invocation
  uint32 maxNumberOfChanges = 2;
}

message GetChangesResponse {
  // Status indicates the result of the GetChanges operation
  Status status = 1;
  // NumberOfChanges indicates the number of change records in the response
  uint32 numberOfChanges = 2;
  // Changes is the collection of change records
  repeated ChangeRecord changes = 3;
}

message ChangeRecord {
  // SerialisedForm is the internal byte array representation of this change record
  bytes serialisedForm = 1;
  // ChangeNumber indicates the change number of this change record
  uint64 changeNumber = 2;
  // NumberOfTrxns indicates the number of transactions associated with this change record
  uint32 numberOfTrxns = 3;
  // Trxns is the collection of transaction records associated with this change record
  repeated TrxnRecord trxns = 4;
}

message TrxnRecord {
  enum TrxnType {
    Unknown = 0;
    Put = 1;
    Delete = 2;
  }
  // Type indicates the type of this transaction - Put, Delete, etc.
  TrxnType type = 1;
  // Key is the byte array representation of the key associated with this transaction
  bytes key = 2;
  // Value is the byte array representation of the value associated with this transaction
  bytes value = 3;
}

