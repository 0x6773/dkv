// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package serverpb is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Status
	PutRequest
	PutResponse
	GetRequest
	GetResponse
*/
package serverpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PutRequest struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PutRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PutRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type PutResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PutResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type GetRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Value  []byte  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Status)(nil), "dkv.serverpb.Status")
	proto.RegisterType((*PutRequest)(nil), "dkv.serverpb.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "dkv.serverpb.PutResponse")
	proto.RegisterType((*GetRequest)(nil), "dkv.serverpb.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "dkv.serverpb.GetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DKV service

type DKVClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type dKVClient struct {
	cc *grpc.ClientConn
}

func NewDKVClient(cc *grpc.ClientConn) DKVClient {
	return &dKVClient{cc}
}

func (c *dKVClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/dkv.serverpb.DKV/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKVClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/dkv.serverpb.DKV/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DKV service

type DKVServer interface {
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
}

func RegisterDKVServer(s *grpc.Server, srv DKVServer) {
	s.RegisterService(&_DKV_serviceDesc, srv)
}

func _DKV_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKV/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKV_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKV/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DKV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dkv.serverpb.DKV",
	HandlerType: (*DKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _DKV_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DKV_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x49, 0xc9, 0x2e, 0xd3, 0x2b, 0x4e, 0x2d, 0x2a, 0x4b,
	0x2d, 0x2a, 0x48, 0x52, 0x32, 0xe3, 0x62, 0x0b, 0x2e, 0x49, 0x2c, 0x29, 0x2d, 0x16, 0x12, 0xe2,
	0x62, 0x49, 0xce, 0x4f, 0x49, 0x95, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0xb3, 0x85, 0x24,
	0xb8, 0xd8, 0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x25, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83,
	0x60, 0x5c, 0x25, 0x13, 0x2e, 0xae, 0x80, 0xd2, 0x92, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12,
	0x21, 0x01, 0x2e, 0xe6, 0xec, 0xd4, 0x4a, 0xb0, 0x56, 0x9e, 0x20, 0x10, 0x53, 0x48, 0x84, 0x8b,
	0xb5, 0x2c, 0x31, 0xa7, 0x14, 0xa2, 0x8f, 0x27, 0x08, 0xc2, 0x51, 0xb2, 0xe6, 0xe2, 0x06, 0xeb,
	0x2a, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0xd2, 0xe1, 0x62, 0x2b, 0x06, 0x5b, 0x0e, 0xd6, 0xc9,
	0x6d, 0x24, 0xa2, 0x87, 0xec, 0x36, 0x3d, 0x88, 0xc3, 0x82, 0xa0, 0x6a, 0x94, 0xe4, 0xb8, 0xb8,
	0xdc, 0x53, 0x71, 0x5b, 0xa9, 0x14, 0xc8, 0xc5, 0x0d, 0x96, 0x27, 0xc7, 0x70, 0xec, 0xee, 0x35,
	0xaa, 0xe5, 0x62, 0x76, 0xf1, 0x0e, 0x13, 0xb2, 0xe2, 0x62, 0x0e, 0x28, 0x2d, 0x11, 0x92, 0x40,
	0x35, 0x01, 0xe1, 0x7f, 0x29, 0x49, 0x2c, 0x32, 0x50, 0x67, 0x58, 0x71, 0x31, 0xbb, 0xa7, 0x62,
	0xe8, 0x45, 0x78, 0x04, 0x5d, 0x2f, 0x92, 0x17, 0x9c, 0xb8, 0xa2, 0x38, 0x60, 0xe2, 0x49, 0x6c,
	0xe0, 0xd8, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xc2, 0x71, 0xbd, 0xca, 0x01, 0x00,
	0x00,
}
