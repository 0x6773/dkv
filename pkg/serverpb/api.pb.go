// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/serverpb/api.proto

package serverpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TrxnRecord_TrxnType int32

const (
	TrxnRecord_Unknown TrxnRecord_TrxnType = 0
	TrxnRecord_Put     TrxnRecord_TrxnType = 1
	TrxnRecord_Delete  TrxnRecord_TrxnType = 2
)

var TrxnRecord_TrxnType_name = map[int32]string{
	0: "Unknown",
	1: "Put",
	2: "Delete",
}

var TrxnRecord_TrxnType_value = map[string]int32{
	"Unknown": 0,
	"Put":     1,
	"Delete":  2,
}

func (x TrxnRecord_TrxnType) String() string {
	return proto.EnumName(TrxnRecord_TrxnType_name, int32(x))
}

func (TrxnRecord_TrxnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{10, 0}
}

type Status struct {
	// Code captures the error code of the underlying operation.
	// A non zero error code is considered to be a failure.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Message captures if any the error message of the failed operation.
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{0}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PutRequest struct {
	// Key is the key, in bytes, to put into the key value store.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value is the value, in bytes, to associate with the key in the key value store.
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutRequest) Reset()         { *m = PutRequest{} }
func (m *PutRequest) String() string { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()    {}
func (*PutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{1}
}

func (m *PutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutRequest.Unmarshal(m, b)
}
func (m *PutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutRequest.Marshal(b, m, deterministic)
}
func (m *PutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutRequest.Merge(m, src)
}
func (m *PutRequest) XXX_Size() int {
	return xxx_messageInfo_PutRequest.Size(m)
}
func (m *PutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutRequest proto.InternalMessageInfo

func (m *PutRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PutRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type PutResponse struct {
	// Status indicates the result of the Put operation
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutResponse) Reset()         { *m = PutResponse{} }
func (m *PutResponse) String() string { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()    {}
func (*PutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{2}
}

func (m *PutResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutResponse.Unmarshal(m, b)
}
func (m *PutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutResponse.Marshal(b, m, deterministic)
}
func (m *PutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutResponse.Merge(m, src)
}
func (m *PutResponse) XXX_Size() int {
	return xxx_messageInfo_PutResponse.Size(m)
}
func (m *PutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PutResponse proto.InternalMessageInfo

func (m *PutResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type GetRequest struct {
	// Key is the key, in bytes, whose associated value is loaded from the key value store.
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{3}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetResponse struct {
	// Status indicates the result of the Get operation
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Value is the value, in bytes, that is associated with the given key in the key value store.
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{4}
}

func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetResponse.Unmarshal(m, b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return xxx_messageInfo_GetResponse.Size(m)
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type MultiGetRequest struct {
	// Keys is the collection of keys whose values are returned from the bulk Get operation.
	Keys                 [][]byte `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiGetRequest) Reset()         { *m = MultiGetRequest{} }
func (m *MultiGetRequest) String() string { return proto.CompactTextString(m) }
func (*MultiGetRequest) ProtoMessage()    {}
func (*MultiGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{5}
}

func (m *MultiGetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiGetRequest.Unmarshal(m, b)
}
func (m *MultiGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiGetRequest.Marshal(b, m, deterministic)
}
func (m *MultiGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiGetRequest.Merge(m, src)
}
func (m *MultiGetRequest) XXX_Size() int {
	return xxx_messageInfo_MultiGetRequest.Size(m)
}
func (m *MultiGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MultiGetRequest proto.InternalMessageInfo

func (m *MultiGetRequest) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

type MultiGetResponse struct {
	// Status indicates the result of the bulk Get operation
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Values are the individual responses of the bulk Get operation.
	Values               [][]byte `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiGetResponse) Reset()         { *m = MultiGetResponse{} }
func (m *MultiGetResponse) String() string { return proto.CompactTextString(m) }
func (*MultiGetResponse) ProtoMessage()    {}
func (*MultiGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{6}
}

func (m *MultiGetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiGetResponse.Unmarshal(m, b)
}
func (m *MultiGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiGetResponse.Marshal(b, m, deterministic)
}
func (m *MultiGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiGetResponse.Merge(m, src)
}
func (m *MultiGetResponse) XXX_Size() int {
	return xxx_messageInfo_MultiGetResponse.Size(m)
}
func (m *MultiGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MultiGetResponse proto.InternalMessageInfo

func (m *MultiGetResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *MultiGetResponse) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

type GetChangesRequest struct {
	// FromChangeNumber is the starting change number from which to retrieve changes
	FromChangeNumber uint64 `protobuf:"varint,1,opt,name=fromChangeNumber,proto3" json:"fromChangeNumber,omitempty"`
	// MaxNumberOfChanges is the maximum number of changes to return from this invocation
	MaxNumberOfChanges   uint32   `protobuf:"varint,2,opt,name=maxNumberOfChanges,proto3" json:"maxNumberOfChanges,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetChangesRequest) Reset()         { *m = GetChangesRequest{} }
func (m *GetChangesRequest) String() string { return proto.CompactTextString(m) }
func (*GetChangesRequest) ProtoMessage()    {}
func (*GetChangesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{7}
}

func (m *GetChangesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetChangesRequest.Unmarshal(m, b)
}
func (m *GetChangesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetChangesRequest.Marshal(b, m, deterministic)
}
func (m *GetChangesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChangesRequest.Merge(m, src)
}
func (m *GetChangesRequest) XXX_Size() int {
	return xxx_messageInfo_GetChangesRequest.Size(m)
}
func (m *GetChangesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChangesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetChangesRequest proto.InternalMessageInfo

func (m *GetChangesRequest) GetFromChangeNumber() uint64 {
	if m != nil {
		return m.FromChangeNumber
	}
	return 0
}

func (m *GetChangesRequest) GetMaxNumberOfChanges() uint32 {
	if m != nil {
		return m.MaxNumberOfChanges
	}
	return 0
}

type GetChangesResponse struct {
	// Status indicates the result of the GetChanges operation
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// MasterChangeNumber indicates the latest change number on master node
	MasterChangeNumber uint64 `protobuf:"varint,2,opt,name=masterChangeNumber,proto3" json:"masterChangeNumber,omitempty"`
	// NumberOfChanges indicates the number of change records in the response
	NumberOfChanges uint32 `protobuf:"varint,3,opt,name=numberOfChanges,proto3" json:"numberOfChanges,omitempty"`
	// Changes is the collection of change records
	Changes              []*ChangeRecord `protobuf:"bytes,4,rep,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetChangesResponse) Reset()         { *m = GetChangesResponse{} }
func (m *GetChangesResponse) String() string { return proto.CompactTextString(m) }
func (*GetChangesResponse) ProtoMessage()    {}
func (*GetChangesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{8}
}

func (m *GetChangesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetChangesResponse.Unmarshal(m, b)
}
func (m *GetChangesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetChangesResponse.Marshal(b, m, deterministic)
}
func (m *GetChangesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChangesResponse.Merge(m, src)
}
func (m *GetChangesResponse) XXX_Size() int {
	return xxx_messageInfo_GetChangesResponse.Size(m)
}
func (m *GetChangesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChangesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetChangesResponse proto.InternalMessageInfo

func (m *GetChangesResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetChangesResponse) GetMasterChangeNumber() uint64 {
	if m != nil {
		return m.MasterChangeNumber
	}
	return 0
}

func (m *GetChangesResponse) GetNumberOfChanges() uint32 {
	if m != nil {
		return m.NumberOfChanges
	}
	return 0
}

func (m *GetChangesResponse) GetChanges() []*ChangeRecord {
	if m != nil {
		return m.Changes
	}
	return nil
}

type ChangeRecord struct {
	// SerialisedForm is the internal byte array representation of this change record
	SerialisedForm []byte `protobuf:"bytes,1,opt,name=serialisedForm,proto3" json:"serialisedForm,omitempty"`
	// ChangeNumber indicates the change number of this change record
	ChangeNumber uint64 `protobuf:"varint,2,opt,name=changeNumber,proto3" json:"changeNumber,omitempty"`
	// NumberOfTrxns indicates the number of transactions associated with this change record
	NumberOfTrxns uint32 `protobuf:"varint,3,opt,name=numberOfTrxns,proto3" json:"numberOfTrxns,omitempty"`
	// Trxns is the collection of transaction records associated with this change record
	Trxns                []*TrxnRecord `protobuf:"bytes,4,rep,name=trxns,proto3" json:"trxns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ChangeRecord) Reset()         { *m = ChangeRecord{} }
func (m *ChangeRecord) String() string { return proto.CompactTextString(m) }
func (*ChangeRecord) ProtoMessage()    {}
func (*ChangeRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{9}
}

func (m *ChangeRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeRecord.Unmarshal(m, b)
}
func (m *ChangeRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeRecord.Marshal(b, m, deterministic)
}
func (m *ChangeRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeRecord.Merge(m, src)
}
func (m *ChangeRecord) XXX_Size() int {
	return xxx_messageInfo_ChangeRecord.Size(m)
}
func (m *ChangeRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeRecord proto.InternalMessageInfo

func (m *ChangeRecord) GetSerialisedForm() []byte {
	if m != nil {
		return m.SerialisedForm
	}
	return nil
}

func (m *ChangeRecord) GetChangeNumber() uint64 {
	if m != nil {
		return m.ChangeNumber
	}
	return 0
}

func (m *ChangeRecord) GetNumberOfTrxns() uint32 {
	if m != nil {
		return m.NumberOfTrxns
	}
	return 0
}

func (m *ChangeRecord) GetTrxns() []*TrxnRecord {
	if m != nil {
		return m.Trxns
	}
	return nil
}

type TrxnRecord struct {
	// Type indicates the type of this transaction - Put, Delete, etc.
	Type TrxnRecord_TrxnType `protobuf:"varint,1,opt,name=type,proto3,enum=dkv.serverpb.TrxnRecord_TrxnType" json:"type,omitempty"`
	// Key is the byte array representation of the key associated with this transaction
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Value is the byte array representation of the value associated with this transaction
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrxnRecord) Reset()         { *m = TrxnRecord{} }
func (m *TrxnRecord) String() string { return proto.CompactTextString(m) }
func (*TrxnRecord) ProtoMessage()    {}
func (*TrxnRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{10}
}

func (m *TrxnRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrxnRecord.Unmarshal(m, b)
}
func (m *TrxnRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrxnRecord.Marshal(b, m, deterministic)
}
func (m *TrxnRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrxnRecord.Merge(m, src)
}
func (m *TrxnRecord) XXX_Size() int {
	return xxx_messageInfo_TrxnRecord.Size(m)
}
func (m *TrxnRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_TrxnRecord.DiscardUnknown(m)
}

var xxx_messageInfo_TrxnRecord proto.InternalMessageInfo

func (m *TrxnRecord) GetType() TrxnRecord_TrxnType {
	if m != nil {
		return m.Type
	}
	return TrxnRecord_Unknown
}

func (m *TrxnRecord) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TrxnRecord) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type BackupRequest struct {
	// BackupPath indicates a filesystem folder or file used for backing up the keyspace.
	BackupPath           string   `protobuf:"bytes,1,opt,name=backupPath,proto3" json:"backupPath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BackupRequest) Reset()         { *m = BackupRequest{} }
func (m *BackupRequest) String() string { return proto.CompactTextString(m) }
func (*BackupRequest) ProtoMessage()    {}
func (*BackupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{11}
}

func (m *BackupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackupRequest.Unmarshal(m, b)
}
func (m *BackupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackupRequest.Marshal(b, m, deterministic)
}
func (m *BackupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupRequest.Merge(m, src)
}
func (m *BackupRequest) XXX_Size() int {
	return xxx_messageInfo_BackupRequest.Size(m)
}
func (m *BackupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupRequest proto.InternalMessageInfo

func (m *BackupRequest) GetBackupPath() string {
	if m != nil {
		return m.BackupPath
	}
	return ""
}

type RestoreRequest struct {
	// RestorePath indicates a filesystem folder or file used for restoring the keyspace.
	RestorePath          string   `protobuf:"bytes,1,opt,name=restorePath,proto3" json:"restorePath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestoreRequest) Reset()         { *m = RestoreRequest{} }
func (m *RestoreRequest) String() string { return proto.CompactTextString(m) }
func (*RestoreRequest) ProtoMessage()    {}
func (*RestoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{12}
}

func (m *RestoreRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestoreRequest.Unmarshal(m, b)
}
func (m *RestoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestoreRequest.Marshal(b, m, deterministic)
}
func (m *RestoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreRequest.Merge(m, src)
}
func (m *RestoreRequest) XXX_Size() int {
	return xxx_messageInfo_RestoreRequest.Size(m)
}
func (m *RestoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreRequest proto.InternalMessageInfo

func (m *RestoreRequest) GetRestorePath() string {
	if m != nil {
		return m.RestorePath
	}
	return ""
}

type AddNodeRequest struct {
	// NodeId represents the identifier of the node that needs to
	// be added to the cluster.
	NodeId uint32 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// NodeUrl represents the URL for the Nexus service running on
	// the node that needs to be added to the cluster. Other Nexus
	// peers communicate with this node on this service.
	NodeUrl              string   `protobuf:"bytes,2,opt,name=nodeUrl,proto3" json:"nodeUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddNodeRequest) Reset()         { *m = AddNodeRequest{} }
func (m *AddNodeRequest) String() string { return proto.CompactTextString(m) }
func (*AddNodeRequest) ProtoMessage()    {}
func (*AddNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{13}
}

func (m *AddNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddNodeRequest.Unmarshal(m, b)
}
func (m *AddNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddNodeRequest.Marshal(b, m, deterministic)
}
func (m *AddNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNodeRequest.Merge(m, src)
}
func (m *AddNodeRequest) XXX_Size() int {
	return xxx_messageInfo_AddNodeRequest.Size(m)
}
func (m *AddNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddNodeRequest proto.InternalMessageInfo

func (m *AddNodeRequest) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *AddNodeRequest) GetNodeUrl() string {
	if m != nil {
		return m.NodeUrl
	}
	return ""
}

type RemoveNodeRequest struct {
	// NodeId represents the identifier of the node that needs to
	// be removed from the cluster.
	NodeId               uint32   `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveNodeRequest) Reset()         { *m = RemoveNodeRequest{} }
func (m *RemoveNodeRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveNodeRequest) ProtoMessage()    {}
func (*RemoveNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac913527469ef71, []int{14}
}

func (m *RemoveNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveNodeRequest.Unmarshal(m, b)
}
func (m *RemoveNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveNodeRequest.Marshal(b, m, deterministic)
}
func (m *RemoveNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveNodeRequest.Merge(m, src)
}
func (m *RemoveNodeRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveNodeRequest.Size(m)
}
func (m *RemoveNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveNodeRequest proto.InternalMessageInfo

func (m *RemoveNodeRequest) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func init() {
	proto.RegisterEnum("dkv.serverpb.TrxnRecord_TrxnType", TrxnRecord_TrxnType_name, TrxnRecord_TrxnType_value)
	proto.RegisterType((*Status)(nil), "dkv.serverpb.Status")
	proto.RegisterType((*PutRequest)(nil), "dkv.serverpb.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "dkv.serverpb.PutResponse")
	proto.RegisterType((*GetRequest)(nil), "dkv.serverpb.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "dkv.serverpb.GetResponse")
	proto.RegisterType((*MultiGetRequest)(nil), "dkv.serverpb.MultiGetRequest")
	proto.RegisterType((*MultiGetResponse)(nil), "dkv.serverpb.MultiGetResponse")
	proto.RegisterType((*GetChangesRequest)(nil), "dkv.serverpb.GetChangesRequest")
	proto.RegisterType((*GetChangesResponse)(nil), "dkv.serverpb.GetChangesResponse")
	proto.RegisterType((*ChangeRecord)(nil), "dkv.serverpb.ChangeRecord")
	proto.RegisterType((*TrxnRecord)(nil), "dkv.serverpb.TrxnRecord")
	proto.RegisterType((*BackupRequest)(nil), "dkv.serverpb.BackupRequest")
	proto.RegisterType((*RestoreRequest)(nil), "dkv.serverpb.RestoreRequest")
	proto.RegisterType((*AddNodeRequest)(nil), "dkv.serverpb.AddNodeRequest")
	proto.RegisterType((*RemoveNodeRequest)(nil), "dkv.serverpb.RemoveNodeRequest")
}

func init() { proto.RegisterFile("pkg/serverpb/api.proto", fileDescriptor_8ac913527469ef71) }

var fileDescriptor_8ac913527469ef71 = []byte{
	// 728 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x71, 0x9a, 0xb4, 0x93, 0x9f, 0xa6, 0xa3, 0xaa, 0x0a, 0x01, 0x4a, 0x58, 0x01, 0x8a,
	0xa0, 0x4a, 0xa5, 0x50, 0x38, 0xb4, 0xe2, 0x40, 0x1b, 0x51, 0x55, 0x11, 0x6d, 0x59, 0xda, 0x08,
	0x71, 0x73, 0xe2, 0x69, 0x1b, 0x25, 0xb1, 0x8d, 0xbd, 0x0e, 0xcd, 0x4b, 0x20, 0xae, 0xbc, 0x05,
	0x8f, 0xc1, 0x99, 0x27, 0x42, 0x59, 0x7b, 0x89, 0xed, 0x38, 0x12, 0xea, 0x6d, 0xe7, 0x9b, 0xef,
	0x9b, 0xf9, 0x36, 0x9e, 0x9d, 0xc0, 0x96, 0x33, 0xbc, 0xde, 0xf5, 0xc8, 0x9d, 0x90, 0xeb, 0xf4,
	0x76, 0x0d, 0x67, 0xd0, 0x74, 0x5c, 0x5b, 0xd8, 0x58, 0x34, 0x87, 0x93, 0xa6, 0xc2, 0xd9, 0x1b,
	0xc8, 0x7d, 0x12, 0x86, 0xf0, 0x3d, 0x44, 0xc8, 0xf6, 0x6d, 0x93, 0xaa, 0x5a, 0x5d, 0x6b, 0xac,
	0x70, 0x79, 0xc6, 0x2a, 0xe4, 0xc7, 0xe4, 0x79, 0xc6, 0x35, 0x55, 0x33, 0x75, 0xad, 0xb1, 0xc6,
	0x55, 0xc8, 0xf6, 0x00, 0xce, 0x7d, 0xc1, 0xe9, 0xab, 0x4f, 0x9e, 0xc0, 0x0a, 0xe8, 0x43, 0x9a,
	0x4a, 0x69, 0x91, 0xcf, 0x8e, 0xb8, 0x09, 0x2b, 0x13, 0x63, 0xe4, 0x07, 0xba, 0x22, 0x0f, 0x02,
	0x76, 0x00, 0x05, 0xa9, 0xf2, 0x1c, 0xdb, 0xf2, 0x08, 0x77, 0x20, 0xe7, 0xc9, 0xe6, 0x52, 0x59,
	0x68, 0x6d, 0x36, 0xa3, 0xde, 0x9a, 0x81, 0x31, 0x1e, 0x72, 0xd8, 0x36, 0xc0, 0x31, 0x2d, 0x6f,
	0xc9, 0x3e, 0x42, 0x41, 0xe6, 0xef, 0x52, 0x7c, 0x89, 0xdf, 0x67, 0xb0, 0xfe, 0xc1, 0x1f, 0x89,
	0x41, 0xa4, 0x2f, 0x42, 0x76, 0x48, 0xd3, 0x59, 0x51, 0xbd, 0x51, 0xe4, 0xf2, 0xcc, 0x3e, 0x43,
	0x65, 0x4e, 0xbb, 0x53, 0xfb, 0x2d, 0xc8, 0xc9, 0x8e, 0x5e, 0x35, 0x23, 0xeb, 0x86, 0x11, 0xb3,
	0x61, 0xe3, 0x98, 0xc4, 0xd1, 0x8d, 0x61, 0x5d, 0x93, 0xa7, 0x2c, 0xbc, 0x80, 0xca, 0x95, 0x6b,
	0x8f, 0x03, 0xf4, 0xd4, 0x1f, 0xf7, 0xc8, 0x95, 0x4d, 0xb2, 0x7c, 0x01, 0xc7, 0x26, 0xe0, 0xd8,
	0xb8, 0x0d, 0x82, 0xb3, 0xab, 0xb0, 0x90, 0xbc, 0x64, 0x89, 0xa7, 0x64, 0xd8, 0x1f, 0x0d, 0x30,
	0xda, 0xf1, 0x4e, 0xb7, 0x91, 0x4d, 0x3d, 0x41, 0x6e, 0xcc, 0x62, 0x46, 0x5a, 0x4c, 0xc9, 0x60,
	0x03, 0xd6, 0xad, 0x84, 0x43, 0x5d, 0x3a, 0x4c, 0xc2, 0xb8, 0x07, 0xf9, 0x7e, 0xc8, 0xc8, 0xd6,
	0xf5, 0x46, 0xa1, 0x55, 0x8b, 0x1b, 0x09, 0x78, 0x9c, 0xfa, 0xb6, 0x6b, 0x72, 0x45, 0x65, 0xbf,
	0x34, 0x28, 0x46, 0x33, 0xf8, 0x1c, 0xca, 0x1e, 0xb9, 0x03, 0x63, 0x34, 0xf0, 0xc8, 0x7c, 0x6f,
	0xbb, 0xe3, 0x70, 0x8e, 0x12, 0x28, 0x32, 0x28, 0xf6, 0x17, 0xaf, 0x10, 0xc3, 0xf0, 0x29, 0x94,
	0x94, 0xcb, 0x0b, 0xf7, 0xd6, 0x52, 0xd6, 0xe3, 0x20, 0x36, 0x61, 0x45, 0xc8, 0x6c, 0x60, 0xbb,
	0x1a, 0xb7, 0x3d, 0xe3, 0x84, 0xa6, 0x03, 0x1a, 0xfb, 0xa9, 0x01, 0xcc, 0x51, 0x7c, 0x0d, 0x59,
	0x31, 0x75, 0x82, 0xc7, 0x59, 0x6e, 0x3d, 0x59, 0xa6, 0x96, 0xc7, 0x8b, 0xa9, 0x43, 0x5c, 0xd2,
	0xd5, 0x23, 0xc9, 0xa4, 0xbc, 0x4b, 0x3d, 0x3a, 0xe7, 0x3b, 0xb0, 0xaa, 0x94, 0x58, 0x80, 0xfc,
	0xa5, 0x35, 0xb4, 0xec, 0x6f, 0x56, 0xe5, 0x1e, 0xe6, 0x41, 0x3f, 0xf7, 0x45, 0x45, 0x43, 0x80,
	0x5c, 0x9b, 0x46, 0x24, 0xa8, 0x92, 0x61, 0xbb, 0x50, 0x3a, 0x34, 0xfa, 0x43, 0xdf, 0x51, 0x03,
	0xb9, 0x0d, 0xd0, 0x93, 0xc0, 0xb9, 0x21, 0x6e, 0xa4, 0xc7, 0x35, 0x1e, 0x41, 0x58, 0x0b, 0xca,
	0x9c, 0x3c, 0x61, 0xbb, 0xa4, 0x14, 0x75, 0x28, 0xb8, 0x01, 0x12, 0x91, 0x44, 0x21, 0x76, 0x08,
	0xe5, 0x77, 0xa6, 0x79, 0x6a, 0x9b, 0xff, 0x34, 0x5b, 0x90, 0xb3, 0x6c, 0x93, 0x4e, 0x4c, 0x49,
	0x2f, 0xf1, 0x30, 0x9a, 0x2d, 0xa9, 0xd9, 0xe9, 0xd2, 0x1d, 0xa9, 0x25, 0x15, 0x86, 0xec, 0x25,
	0x6c, 0x70, 0x1a, 0xdb, 0x13, 0xfa, 0x8f, 0x32, 0xad, 0xdf, 0x1a, 0xe8, 0xed, 0x4e, 0x17, 0xf7,
	0xe5, 0x95, 0x31, 0xf1, 0x85, 0xe6, 0xcb, 0xae, 0x76, 0x3f, 0x25, 0x13, 0x3e, 0x93, 0x7d, 0xd0,
	0x8f, 0x69, 0x41, 0x3b, 0xdf, 0x1e, 0x49, 0x6d, 0x74, 0x61, 0x9c, 0xc0, 0xaa, 0x5a, 0x22, 0xf8,
	0x28, 0x4e, 0x4b, 0xec, 0xa0, 0xda, 0xf6, 0xb2, 0x74, 0x50, 0xaa, 0x65, 0x40, 0xb9, 0xdd, 0xe9,
	0x72, 0x72, 0x46, 0x83, 0xbe, 0x21, 0x06, 0xb6, 0x85, 0x67, 0x72, 0x77, 0xaa, 0x57, 0xf4, 0x78,
	0xc1, 0x45, 0x7c, 0xc3, 0xd4, 0xea, 0xcb, 0x09, 0x61, 0x8b, 0xef, 0x1a, 0x54, 0xda, 0x9d, 0xae,
	0x9a, 0x03, 0xf9, 0xdd, 0xf0, 0x00, 0x72, 0x01, 0x80, 0x0f, 0xe2, 0x05, 0x62, 0xe3, 0x52, 0x4b,
	0x5d, 0x1e, 0xf8, 0x16, 0xf2, 0xaa, 0xce, 0xc3, 0x38, 0x21, 0x3e, 0x3b, 0xe9, 0xf2, 0xd6, 0x0f,
	0x0d, 0xa0, 0xdd, 0xe9, 0x1e, 0x8d, 0xfc, 0xd9, 0x7a, 0x99, 0x55, 0x0b, 0xc7, 0x27, 0x59, 0x2d,
	0x3e, 0x55, 0x4b, 0xcc, 0x1c, 0x01, 0xcc, 0x27, 0x27, 0xf9, 0x7b, 0x2d, 0xcc, 0x54, 0x7a, 0x91,
	0x43, 0xf8, 0xb2, 0xaa, 0xa0, 0x5e, 0x4e, 0xfe, 0xf9, 0xbe, 0xfa, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x1d, 0xc3, 0x86, 0x08, 0x96, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DKVClient is the client API for DKV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DKVClient interface {
	// Put puts the given key into the key value store
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// Get gets the value associated with the given key from the key value store
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// MultiGet gets all the values associated with the given keys from the key value store
	MultiGet(ctx context.Context, in *MultiGetRequest, opts ...grpc.CallOption) (*MultiGetResponse, error)
}

type dKVClient struct {
	cc *grpc.ClientConn
}

func NewDKVClient(cc *grpc.ClientConn) DKVClient {
	return &dKVClient{cc}
}

func (c *dKVClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/dkv.serverpb.DKV/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKVClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/dkv.serverpb.DKV/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKVClient) MultiGet(ctx context.Context, in *MultiGetRequest, opts ...grpc.CallOption) (*MultiGetResponse, error) {
	out := new(MultiGetResponse)
	err := c.cc.Invoke(ctx, "/dkv.serverpb.DKV/MultiGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DKVServer is the server API for DKV service.
type DKVServer interface {
	// Put puts the given key into the key value store
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// Get gets the value associated with the given key from the key value store
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// MultiGet gets all the values associated with the given keys from the key value store
	MultiGet(context.Context, *MultiGetRequest) (*MultiGetResponse, error)
}

// UnimplementedDKVServer can be embedded to have forward compatible implementations.
type UnimplementedDKVServer struct {
}

func (*UnimplementedDKVServer) Put(ctx context.Context, req *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedDKVServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDKVServer) MultiGet(ctx context.Context, req *MultiGetRequest) (*MultiGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiGet not implemented")
}

func RegisterDKVServer(s *grpc.Server, srv DKVServer) {
	s.RegisterService(&_DKV_serviceDesc, srv)
}

func _DKV_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKV/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKV_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKV/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKV_MultiGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).MultiGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKV/MultiGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).MultiGet(ctx, req.(*MultiGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DKV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dkv.serverpb.DKV",
	HandlerType: (*DKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _DKV_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DKV_Get_Handler,
		},
		{
			MethodName: "MultiGet",
			Handler:    _DKV_MultiGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/serverpb/api.proto",
}

// DKVReplicationClient is the client API for DKVReplication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DKVReplicationClient interface {
	// GetChanges retrieves all changes from a given change number
	GetChanges(ctx context.Context, in *GetChangesRequest, opts ...grpc.CallOption) (*GetChangesResponse, error)
}

type dKVReplicationClient struct {
	cc *grpc.ClientConn
}

func NewDKVReplicationClient(cc *grpc.ClientConn) DKVReplicationClient {
	return &dKVReplicationClient{cc}
}

func (c *dKVReplicationClient) GetChanges(ctx context.Context, in *GetChangesRequest, opts ...grpc.CallOption) (*GetChangesResponse, error) {
	out := new(GetChangesResponse)
	err := c.cc.Invoke(ctx, "/dkv.serverpb.DKVReplication/GetChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DKVReplicationServer is the server API for DKVReplication service.
type DKVReplicationServer interface {
	// GetChanges retrieves all changes from a given change number
	GetChanges(context.Context, *GetChangesRequest) (*GetChangesResponse, error)
}

// UnimplementedDKVReplicationServer can be embedded to have forward compatible implementations.
type UnimplementedDKVReplicationServer struct {
}

func (*UnimplementedDKVReplicationServer) GetChanges(ctx context.Context, req *GetChangesRequest) (*GetChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChanges not implemented")
}

func RegisterDKVReplicationServer(s *grpc.Server, srv DKVReplicationServer) {
	s.RegisterService(&_DKVReplication_serviceDesc, srv)
}

func _DKVReplication_GetChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVReplicationServer).GetChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKVReplication/GetChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVReplicationServer).GetChanges(ctx, req.(*GetChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DKVReplication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dkv.serverpb.DKVReplication",
	HandlerType: (*DKVReplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChanges",
			Handler:    _DKVReplication_GetChanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/serverpb/api.proto",
}

// DKVBackupRestoreClient is the client API for DKVBackupRestore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DKVBackupRestoreClient interface {
	// Backup backs up the entire keyspace into the given filesystem location.
	Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*Status, error)
	// Restore restores the entire keyspace from an existing backup at the
	// given filesystem location.
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*Status, error)
}

type dKVBackupRestoreClient struct {
	cc *grpc.ClientConn
}

func NewDKVBackupRestoreClient(cc *grpc.ClientConn) DKVBackupRestoreClient {
	return &dKVBackupRestoreClient{cc}
}

func (c *dKVBackupRestoreClient) Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dkv.serverpb.DKVBackupRestore/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKVBackupRestoreClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dkv.serverpb.DKVBackupRestore/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DKVBackupRestoreServer is the server API for DKVBackupRestore service.
type DKVBackupRestoreServer interface {
	// Backup backs up the entire keyspace into the given filesystem location.
	Backup(context.Context, *BackupRequest) (*Status, error)
	// Restore restores the entire keyspace from an existing backup at the
	// given filesystem location.
	Restore(context.Context, *RestoreRequest) (*Status, error)
}

// UnimplementedDKVBackupRestoreServer can be embedded to have forward compatible implementations.
type UnimplementedDKVBackupRestoreServer struct {
}

func (*UnimplementedDKVBackupRestoreServer) Backup(ctx context.Context, req *BackupRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (*UnimplementedDKVBackupRestoreServer) Restore(ctx context.Context, req *RestoreRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}

func RegisterDKVBackupRestoreServer(s *grpc.Server, srv DKVBackupRestoreServer) {
	s.RegisterService(&_DKVBackupRestore_serviceDesc, srv)
}

func _DKVBackupRestore_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVBackupRestoreServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKVBackupRestore/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVBackupRestoreServer).Backup(ctx, req.(*BackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKVBackupRestore_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVBackupRestoreServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKVBackupRestore/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVBackupRestoreServer).Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DKVBackupRestore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dkv.serverpb.DKVBackupRestore",
	HandlerType: (*DKVBackupRestoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Backup",
			Handler:    _DKVBackupRestore_Backup_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _DKVBackupRestore_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/serverpb/api.proto",
}

// DKVClusterClient is the client API for DKVCluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DKVClusterClient interface {
	// AddNode adds the given DKV node to the cluster that the
	// current node is a member of.
	AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*Status, error)
	// RemoveNode removes the given DKV node from the cluster that
	// the current node is a member of.
	RemoveNode(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*Status, error)
}

type dKVClusterClient struct {
	cc *grpc.ClientConn
}

func NewDKVClusterClient(cc *grpc.ClientConn) DKVClusterClient {
	return &dKVClusterClient{cc}
}

func (c *dKVClusterClient) AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dkv.serverpb.DKVCluster/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKVClusterClient) RemoveNode(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dkv.serverpb.DKVCluster/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DKVClusterServer is the server API for DKVCluster service.
type DKVClusterServer interface {
	// AddNode adds the given DKV node to the cluster that the
	// current node is a member of.
	AddNode(context.Context, *AddNodeRequest) (*Status, error)
	// RemoveNode removes the given DKV node from the cluster that
	// the current node is a member of.
	RemoveNode(context.Context, *RemoveNodeRequest) (*Status, error)
}

// UnimplementedDKVClusterServer can be embedded to have forward compatible implementations.
type UnimplementedDKVClusterServer struct {
}

func (*UnimplementedDKVClusterServer) AddNode(ctx context.Context, req *AddNodeRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (*UnimplementedDKVClusterServer) RemoveNode(ctx context.Context, req *RemoveNodeRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}

func RegisterDKVClusterServer(s *grpc.Server, srv DKVClusterServer) {
	s.RegisterService(&_DKVCluster_serviceDesc, srv)
}

func _DKVCluster_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVClusterServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKVCluster/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVClusterServer).AddNode(ctx, req.(*AddNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKVCluster_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVClusterServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKVCluster/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVClusterServer).RemoveNode(ctx, req.(*RemoveNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DKVCluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dkv.serverpb.DKVCluster",
	HandlerType: (*DKVClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _DKVCluster_AddNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _DKVCluster_RemoveNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/serverpb/api.proto",
}
